name: Install and Build

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }} 

on:
  push:
    paths-ignore:
      - "**.pdf"
      - "**.mhtml"

jobs:
  build: 
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Show node version
        run: echo node -v

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
    
      - name: Install dependencies
        run: pnpm install

      - name: Build the app
        run: pnpm run build

      - name: Test the connection
        run: |
              pnpm run preview &
              sleep 5
              curl -I http://localhost:4173

      # - name: Setup Bun
      #   uses: oven-sh/setup-bun@v1

      # - name: Install
      #   run: bun install

      # - name: Build the app
      #   run: bun run build

  snapshot:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Show node version
        run: echo node -v

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
    
      - name: Install dependencies
        run: pnpm install

      - name: Build the app
        run: pnpm run build

      - name: Test the connection
        run: |
              pnpm run preview &
              sleep 5
              curl -I http://localhost:4173

      - name: Snapshot
        run: |
              mkdir -m 777 gen
              docker run -i --init --cap-add=SYS_ADMIN --network host -v ./gen:/home/pptruser/gen ghcr.io/puppeteer/puppeteer:latest 
              node -e "$(cat snapshot.js)" http://127.0.0.1:4173 ./gen
              mv gen/* static/

      - name: git config
        run: |
          git config --global user.name "Github Action CI"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: push to git
        run: |
              git add static
              git commit -m "Snapshot ${{ github.sha}}"
              git push

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build
      - snapshot

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
    
      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Netlify Deploy
        uses: jsmrcaga/action-netlify-deploy@v2.0.0
        with: 
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          install_command: pnpm i
          build_command: pnpm run build
          
  
    
